# name = Fahri Numan Eskici
# ID = 2309995

# Execution begins at address 0 
.pos 0 
	irmovq stack, %rsp  	# Set up stack pointer  
	irmovq root, %rdi		# set parameter
	call max_btree			# call max_btree(root)
	halt					# Terminate program 

# A binary (not search!) tree,
# absolutely positioned again.
.pos 0x200
root:
.quad 5
.quad node7
.quad node12
node7:
.quad 7
.quad node25
.quad node905
node25:
.quad 25
.quad 0
.quad 0
node905:
.quad 905
.quad nodem1
.quad 0
nodem1:
.quad -1
.quad 0
.quad 0
node12:
.quad 12
.quad node219
.quad nodem10
node219:
.quad 219
.quad 0
.quad 0
nodem10:
.quad -10
.quad 0
.quad node331
node331:
.quad 331
.quad 0
.quad 0

/* $begin max_btree */

max_btree:
    irmovl $0, %rax
	andq %rdi, %rdi 		
	je done 				
	mrmovq (%rdi), %rax		
    pushq %r10				
	mrmovq $8(%rdi), %rdi	
	call max_btree
    cmpl %r10, %rax
    cmovg (%r10), %rax
    pop %r10
    mrmovq $16(%rdi), %rdi
	call max_btree
    cmpl %r10, %rax
    cmovg (%r10), %rax
    pop %r10	
done:			
	ret 					
/* $end rsum_list */


# The stack starts here and grows to lower addresses
	.pos 0x400		
stack:

/* $begin max_btree */

max_btree:
	andq %rdi, %rdi 		
	je done
    pushq %rdi			
	mrmovq (%rdi), %rcx					
	mrmovq 8(%rdi), %rdi	
	call max_btree
    subq  %rax, %r10
    cmovg %r10, %rax
    popq %r10
    mrmovq 16(%rdi), %rdi
	call max_btree
    subq  %rax, %r10
    cmovg %r10, %rax
    popq %r10	
done:			
	ret 					
/* $end rsum_list */

max_btree:
        andq %rdi, %rdi    #if (root)
        je done               #if null done
        mrmovq (%rdi), %rcx  # max = root->value
        pushq %rdi           # save rdi to stack
        mrmovq 8(%rdi), %rdi   # root = root->left
        rrmovq %rax, %rbx
        rrmovq %rcx, %rax
        call max_btree    #candidate = max_btree(root->left)
        call test1
        popq %rdi
        mrmovq (%rdi), %rcx
        mrmovq 16(%rdi), %rdi   # root = root->right
        rrmovq %rcx, %rax
        call max_btree     #candidate = max_btree(root->right)
        call test1
        
        
test1:
        subq  %rcx, %rax
        rrmovq %rbx, %rax
        jle done
        mrmovq (%rcx), %rax
        
done:
        ret


____

max_btree:
        andq %rdi, %rdi    #if (root)
        je done               #if null done
        pushq %rdi           # save rdi to stack
        mrmovq (%rdi), %rbx
        pushq %rbx
        mrmovq 8(%rdi), %rdi   # root = root->left
        call max_btree
        call test

        popq %rdi

        mrmovq 16(%rdi), %rdi   # root = root->left
        call push_all


test1:
        subq  %rcx, %rax
        rrmovq %rbx, %rax
        jle done
        mrmovq (%rcx), %rax

        popq %rdi

        mrmovq (%rdi), %rcx
        mrmovq 16(%rdi), %rdi   
        rrmovq %rcx, %rax
        call max_btree     
        subq  %rcx, %rax
        rrmovq %rbx, %rax
        jle done
        mrmovq (%rcx), %rax
        
   
done:
        ret