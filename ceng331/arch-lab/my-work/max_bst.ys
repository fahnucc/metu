# name = Fahri Numan Eskici
# ID = 2309995

# Execution begins at address 0 
.pos 0 
	irmovq stack, %rsp  	# Set up stack pointer  
	irmovq root, %rdi		# set parameter
	call max_bst			# call max_bst(root)
	halt					# Terminate program 

# A sample eleven-element BST. Absolutely positioned
# to avoid confusion when debugging.
.pos 0x200
root:
.quad 17
.quad node6
.quad node24
node6:
.quad 6
.quad node4
.quad node11
node4:
.quad 4
.quad node3
.quad node5
node3:
.quad 3
.quad 0
.quad 0
node5:
.quad 5
.quad 0 # Remember that 0 is null.
.quad 0
node11:
.quad 11
.quad node8
.quad 0
node8:
.quad 8
.quad 0
.quad 0
node24:
.quad 24
.quad node19
.quad node40
node19:
.quad 19
.quad 0
.quad 0
node40:
.quad 40
.quad 0
.quad node52
node52:
.quad 52
.quad 0
.quad 0

/* $start max_bst */
max_bst:
	xorq %rax, %rax 		# val = 0
	jmp test 				# jump directly to test
loop:
	mrmovq (%rdi), %rax 	# mov current node's value to rax
	mrmovq $16(%rdi), %rdi   # ls = ls->next
test:
	andq %rdi, %rdi 		# test loop variable
	jne loop 				# return loop if it's not null
	ret 					
/* $end max_bst */


# The stack starts here and grows to lower addresses
	.pos 0x200		
stack: